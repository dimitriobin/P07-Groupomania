openapi: "3.0.0"
info:
  title: Groupomania
  version: "0.1.0"
  description: >
     Parcours developpeur web - projet 07
host: localhost:3000
explorer: true
basePath: /
paths:
# //////////////////
# USERS
# ///////////////////
  /api/users/signup:
    post:
      tags: [Users]
      summary: CREATE A USER
      produces: application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_name:
                  type: string
                email: 
                  type: string
                password: 
                  type: string
                image_url: 
                  type: string
                birthdate: 
                  type: date
                restricted: 
                  type: boolean
                shareWithPartners: 
                  type: boolean
                contactable: 
                  type: boolean
              required:
                - user_name
                - email
                - password
                - birthdate
                - restricted
                - shareWithPartners
                - contactable
              example:
                user_name: JohnDoe123
                email: johndoe@mail.com
                password: Password123!
                image_url: "http://localhost:3000/images/imagename1605263493723.jpg"
                birthdate: 1988-10-21
                restricted: false
                shareWithPartners: true
                contactable: true
      responses:
        '201':
          description: User created
          content:
            application/json: 
              schema:
                type: string
                example:  User created
        '500':
          description: Internal error
          content:
            application/json: 
              schema:
                type: object
                example:  {error: {}}
  /api/users/login:
    post:
      tags: [Users]
      summary: AUTHENTICATE A USER
      produces: application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: 
                  type: string
                password: 
                  type: string
              required:
                - email
                - password
              example:
                email: johndoe@mail.com
                password: Password123!
      responses:
        '200':
          description: User logged. The token is valid for 12 hours long.
          content:
            application/json: 
              schema:
                type: object
                example:
                  userId: 2
                  token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjIsImlhdCI6MTYwNTI3NTE1OCwiZXhwIjoxNjA1MzE4MzU4fQ.9ek2VOjTdytJDin9TxlzhYhYanXtPFpsUWsKZMYYrHM
        '400':
          description: Bad request
          content:
            application/json: 
              schema:
                type: string
                example:  Wrong password
        '404':
          description: User not found
          content:
            application/json: 
              schema: 
                type: string
                example: User not found
        '500':
          description: Internal error
          content:
            application/json: 
              schema:
                type: object
                example:  {error: {}}
  /api/users/:
    get:
      tags: [Users]
      summary: READ ALL USERS
      produces: application/json
      responses:
        '200':
          description: Returns an array of all users
          content:
            application/json: 
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized request
          content:
            application/json: 
              schema:
                type: string
                example:  Please login
        '404':
          description: Users not found
          content:
            application/json: 
              schema: 
                type: string
                example: Users not found
        '500':
          description: Internal error
          content:
            application/json: 
              schema:
                type: object
                example:  {error: {}}
  /api/users/:id:
    get:
      tags: [Users]
      summary: READ ONE USER
      produces: application/json
      parameters:
      - name: id
        in: path
        description: the user's id
        required: true
        schema:
          type: string
          style: simple
          example: localhost:3000/api/users/4
      responses:
        '200':
          description: Returns a user
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized request
          content:
            application/json: 
              schema:
                type: string
                example:  Please login
        '404':
          description: User not found
          content:
            application/json: 
              schema: 
                type: string
                example: User not found
        '500':
          description: Internal error
          content:
            application/json: 
              schema:
                type: object
                example:  {error: {}}
    put:
      tags: [Users]
      summary: UPDATE A USER
      produces: application/json
      parameters:
      - name: id
        in: path
        description: the user's id
        required: true
        schema:
          type: string
          style: simple
          example: localhost:3000/api/users/4
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_name:
                  type: string
                email: 
                  type: string
                password: 
                  type: string
                image_url: 
                  type: string
                birthdate: 
                  type: string
                  format: date
                restricted: 
                  type: boolean
                shareWithPartners: 
                  type: boolean
                contactable: 
                  type: boolean
              example:
                user_name: JohnDoe123
                email: johndoe@mail.com
                password: Password123!
                image_url: "http://localhost:3000/images/imagename1605263493723.jpg"
                birthdate: 1988-10-21
                restricted: false
                shareWithPartners: true
                contactable: true
      responses:
        '201':
          description: User updated
          content:
            application/json: 
              schema:
                type: string
                example:  User updated
        '401':
          description: Unauthorized request
          content:
            application/json: 
              schema:
                type: string
                example:  Please login
        '404':
          description: User not found
          content:
            application/json: 
              schema: 
                type: string
                example: User not found
        '500':
          description: Internal error
          content:
            application/json: 
              schema:
                type: object
                example:  {error: {}}
    delete:
      tags: [Users]
      summary: DELETE A USER
      produces: application/json
      responses:
# ////////////////////
# SCHEMAS
# ////////////////////
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        user_name:
          type: string
        email:
          type: string
        password:
          type: string
        image_url:
          type: string
        birthdate:
          type: string
          format: date
        parentEmail:
          type: string
        restricted:
          type: boolean
        shareWithPartners:
          type: boolean
        contactable:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      example:
        user_name: JohnDoe123
        email: johndoe@mail.com
        password: Password123!
        image_url: "http://localhost:3000/images/imagename1605263493723.jpg"
        birthdate: 1988-10-21
        restricted: false
        shareWithPartners: true
        contactable: true 